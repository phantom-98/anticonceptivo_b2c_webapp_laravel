<?php


namespace App\Http\Helpers;

use Aws\S3\S3Client;
use Aws\S3\Exception\S3Exception;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Intervention\Image\ImageManagerStatic as Image;
use Exception;


final class TestingHelper
{
    private $bucket;
    private $region;
    private $key;
    private $secret;
    private $version;
    private $url;

    const VALID_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp'];

    public function __construct()
    {
        $this->bucket = env('AWS_BUCKET');
        $this->region = env('AWS_DEFAULT_REGION');
        $this->key = env('AWS_ACCESS_KEY_ID');
        $this->secret = env('AWS_SECRET_ACCESS_KEY');
        $this->version = env('AWS_VERSION');
        $this->url = env('AWS_URL');
    }

    public function delete(): bool
    {
        return false;
    }


    # configuration for store method: default|local|webp|s3
    # default configuration saves webp on s3 and delete file from local storage
    # if you want to save on local only without convert image on webp use local
    #Â if you want to save on local and convert image on webp use webp
    # if you want to save on s3 without converting use s3

    public function store($file, $path): bool
    {
        try{
            $local_path = $this->saveOnLocal($file, $path);
            Log::info('local_path: ' . $local_path);

            Log::info('private functions', [
                'exists' => $this->exists('local', $local_path),
                'getUrl' => $this->getUrl('local', $local_path),
                'getExtension' => $this->getExtension($local_path),
                'getMimeType' => $this->getMimeType('local', $local_path),
                'getFileName' => $this->getFileName($local_path),
                'getFilePath' => $this->getFilePath('local', $local_path),
            ]);

            $this->convertToWebp($local_path);

            return true;
        }catch(Exception $e){
            Log::error('Error storing file on S3: ' . $path, [
                'error' => $e->getMessage(),
            ]);
            return false;
        }
    }

    public function update(): bool
    {
        return false;
    }


    // private function for save files on local storage
    private function saveOnLocal($file, $path): string
    {
        try{
            # get file extension
            $ext = $file->getClientOriginalExtension();

            // validate if $ext is a valid image extension
            if (!in_array($ext, self::VALID_EXTENSIONS)) {
                return false;
            }

            # this name is composed by the current timestamp and the original name of the file
            // $name = time() . '-' . $file->getClientOriginalName();

            # this name is generated by a unique name using uniqid() function and timestamp
            $name = uniqid() . time();

            $file_name = $name . '.' . $ext;

            // save the file on local storage below the given path
            $file->storeAs($path, $file_name, 'local');

            // return the path of the file from local storage
            return $path . '/' . $file_name;
        }catch(\Exception $e){
            Log::error('Error saving file on local storage: ', [
                'error' => $e->getMessage(),
            ]);
        }
    }
    // $file_name = explode(".", $object->$column);
    // $file_name = str_replace('public', 'storage', $file_name[0]);

    // Image::make(Storage::get($object->$column))->encode('webp', 90)->save($file_name.'.webp');
    // // delete the old file
    // Storage::delete($object->$column);
    // $file_name = str_replace('storage', 'public', $file_name);
    // $object->$column = $file_name . '.webp';
    // $object->save();
    private function convertToWebp($path)
    {
        try{

            throw new \Exception('Error converting file to webp');
            return false;
        }catch(\Exception $e){
            Log::error('Error converting image to webp: ', [
                'error' => $e->getMessage(),
            ]);
            return false;
        }
    }

    private function exists($where, $path): bool
    {
        // exist on storage or s3
        if (Storage::disk($where)->exists($path)) {
            return true;
        }

        return false;
    }

    private function getURL($where, $path): string
    {
        // get url from storage or s3
        if ($where == 's3') {
            return $this->url . $path;
        }

        return Storage::disk($where)->url($path);
    }

    private function getExtension($path): string
    {
        return pathinfo($path, PATHINFO_EXTENSION);
    }

    private function getMimeType($where, $path): string
    {
        // get mime type from storage or s3
        if ($where == 's3') {
            return Storage::disk($where)->mimeType($path);
        }

        return Storage::disk($where)->mimeType($path);
    }

    private function getFileName($path): string
    {
        return pathinfo($path, PATHINFO_FILENAME);
    }

    private function getFilePath($where, $path): string
    {
        // get file path from storage or s3
        if ($where == 's3') {
            return $path;
        }

        return Storage::disk($where)->path($path);
    }

}
